{
  "stats": {
    "suites": 5,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-28T15:10:08.968Z",
    "end": "2023-11-28T15:10:15.703Z",
    "duration": 6735,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "da8a211d-9b27-4bc0-8ce8-b6895150b162",
      "title": "",
      "fullFile": "C:\\Users\\Admin\\Downloads\\tdd-bdd-atdd-example-master\\acceptance\\api.atdd.js",
      "file": "\\acceptance\\api.atdd.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e3eecbf6-79f8-4b34-9dc2-67cd729ff6e1",
          "title": "Calc API",
          "fullFile": "C:\\Users\\Admin\\Downloads\\tdd-bdd-atdd-example-master\\acceptance\\api.atdd.js",
          "file": "\\acceptance\\api.atdd.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Calc API \"before all\" hook",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
              "err": {},
              "uuid": "165eab00-2cdd-41bb-be91-44cd880d321e",
              "parentUUID": "e3eecbf6-79f8-4b34-9dc2-67cd729ff6e1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Calc API \"before each\" hook",
              "timedOut": false,
              "duration": 1332,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
              "err": {},
              "uuid": "fe152131-90f3-4e58-83ab-b10c27d40450",
              "parentUUID": "e3eecbf6-79f8-4b34-9dc2-67cd729ff6e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Calc API \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
              "err": {},
              "uuid": "33d6250a-8b3a-45bf-b7c2-f04f8c1a32bd",
              "parentUUID": "e3eecbf6-79f8-4b34-9dc2-67cd729ff6e1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "Calc API \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
              "err": {},
              "uuid": "7f73a52e-5375-4b24-bdfa-583fff0f56bd",
              "parentUUID": "e3eecbf6-79f8-4b34-9dc2-67cd729ff6e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "49ed3d64-d5c7-428b-8aeb-4301ec415cf8",
              "title": "#add",
              "fullFile": "C:\\Users\\Admin\\Downloads\\tdd-bdd-atdd-example-master\\acceptance\\api.atdd.js",
              "file": "\\acceptance\\api.atdd.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Calc API #add \"before each\" hook",
                  "timedOut": false,
                  "duration": 587,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "cdd470c0-6c1b-4c2e-8e93-e5d23512c3d0",
                  "parentUUID": "49ed3d64-d5c7-428b-8aeb-4301ec415cf8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add two arguments",
                  "fullTitle": "Calc API #add should add two arguments",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "5233b760-9ed5-43b0-a8b9-417cdce0412e",
                  "parentUUID": "49ed3d64-d5c7-428b-8aeb-4301ec415cf8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5233b760-9ed5-43b0-a8b9-417cdce0412e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48b4ad0e-8b0a-4d1c-a4b2-aa2ab7acf159",
              "title": "#subtract",
              "fullFile": "C:\\Users\\Admin\\Downloads\\tdd-bdd-atdd-example-master\\acceptance\\api.atdd.js",
              "file": "\\acceptance\\api.atdd.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Calc API #subtract \"before each\" hook",
                  "timedOut": false,
                  "duration": 87,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "bbd42a92-f038-4dce-a0c2-b32d7184228f",
                  "parentUUID": "48b4ad0e-8b0a-4d1c-a4b2-aa2ab7acf159",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add two arguments",
                  "fullTitle": "Calc API #subtract should add two arguments",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "1dd9865d-137c-4959-8941-ff318c6a7477",
                  "parentUUID": "48b4ad0e-8b0a-4d1c-a4b2-aa2ab7acf159",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1dd9865d-137c-4959-8941-ff318c6a7477"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 36,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a8a93d7c-3ae8-4e52-8940-c6c17149fdfb",
              "title": "#multiply",
              "fullFile": "C:\\Users\\Admin\\Downloads\\tdd-bdd-atdd-example-master\\acceptance\\api.atdd.js",
              "file": "\\acceptance\\api.atdd.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Calc API #multiply \"before each\" hook",
                  "timedOut": false,
                  "duration": 79,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "033c8d4d-86ee-44db-a11e-c9a6ec2d18c2",
                  "parentUUID": "a8a93d7c-3ae8-4e52-8940-c6c17149fdfb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add two arguments",
                  "fullTitle": "Calc API #multiply should add two arguments",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "9c319d4e-24c8-4f12-82af-258a41022807",
                  "parentUUID": "a8a93d7c-3ae8-4e52-8940-c6c17149fdfb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c319d4e-24c8-4f12-82af-258a41022807"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 33,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "412a0515-46fc-4007-a5c9-64bc9f258ed0",
              "title": "#divide",
              "fullFile": "C:\\Users\\Admin\\Downloads\\tdd-bdd-atdd-example-master\\acceptance\\api.atdd.js",
              "file": "\\acceptance\\api.atdd.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Calc API #divide \"before each\" hook",
                  "timedOut": false,
                  "duration": 81,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "b3e708b4-db45-4ba0-917f-93d2d2b121a6",
                  "parentUUID": "412a0515-46fc-4007-a5c9-64bc9f258ed0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add two arguments",
                  "fullTitle": "Calc API #divide should add two arguments",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "e7eca265-b259-44a6-80a2-adacc1b2d345",
                  "parentUUID": "412a0515-46fc-4007-a5c9-64bc9f258ed0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7eca265-b259-44a6-80a2-adacc1b2d345"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 36,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "atddreport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "atddreport"
      },
      "version": "6.2.0"
    }
  }
}