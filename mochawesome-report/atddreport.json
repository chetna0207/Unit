{
  "stats": {
    "suites": 5,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-28T14:26:15.459Z",
    "end": "2023-11-28T14:26:23.685Z",
    "duration": 8226,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "878965a9-8ff7-4853-899d-3d13a4df9c7c",
      "title": "",
      "fullFile": "C:\\Users\\Admin\\Downloads\\tdd-bdd-atdd-example-master\\acceptance\\api.atdd.js",
      "file": "\\acceptance\\api.atdd.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2c2ec016-4f1c-41fa-8e2b-5f2727d7e40b",
          "title": "Calc API",
          "fullFile": "C:\\Users\\Admin\\Downloads\\tdd-bdd-atdd-example-master\\acceptance\\api.atdd.js",
          "file": "\\acceptance\\api.atdd.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Calc API \"before all\" hook",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
              "err": {},
              "uuid": "0296b088-1764-4d21-909b-5d4ed0c5fd2c",
              "parentUUID": "2c2ec016-4f1c-41fa-8e2b-5f2727d7e40b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Calc API \"before each\" hook",
              "timedOut": false,
              "duration": 1498,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
              "err": {},
              "uuid": "7ce7ca50-d1f1-4ab6-b8b2-39871265881d",
              "parentUUID": "2c2ec016-4f1c-41fa-8e2b-5f2727d7e40b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Calc API \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
              "err": {},
              "uuid": "e9abfef6-ac35-41fa-9fa5-eea9d1201a54",
              "parentUUID": "2c2ec016-4f1c-41fa-8e2b-5f2727d7e40b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "Calc API \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
              "err": {},
              "uuid": "da27215a-8032-4efb-9200-6e52dbb05b15",
              "parentUUID": "2c2ec016-4f1c-41fa-8e2b-5f2727d7e40b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "324971b1-8e3b-4c4f-ba87-c1273ecd23c5",
              "title": "#add",
              "fullFile": "C:\\Users\\Admin\\Downloads\\tdd-bdd-atdd-example-master\\acceptance\\api.atdd.js",
              "file": "\\acceptance\\api.atdd.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Calc API #add \"before each\" hook",
                  "timedOut": false,
                  "duration": 1350,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "b3712b92-9047-4047-a4e6-46f66ffcf38c",
                  "parentUUID": "324971b1-8e3b-4c4f-ba87-c1273ecd23c5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add two arguments",
                  "fullTitle": "Calc API #add should add two arguments",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "dac51af6-4f1b-4192-b4f8-e0e3a7b4e61a",
                  "parentUUID": "324971b1-8e3b-4c4f-ba87-c1273ecd23c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dac51af6-4f1b-4192-b4f8-e0e3a7b4e61a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "16912068-b6bf-41d3-b404-3ddcd9302598",
              "title": "#subtract",
              "fullFile": "C:\\Users\\Admin\\Downloads\\tdd-bdd-atdd-example-master\\acceptance\\api.atdd.js",
              "file": "\\acceptance\\api.atdd.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Calc API #subtract \"before each\" hook",
                  "timedOut": false,
                  "duration": 142,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "b51bef9e-962a-4cb9-b83a-4bf2ceca5392",
                  "parentUUID": "16912068-b6bf-41d3-b404-3ddcd9302598",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add two arguments",
                  "fullTitle": "Calc API #subtract should add two arguments",
                  "timedOut": false,
                  "duration": 69,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "e687f006-eb22-4655-8f31-ce1db74e92e8",
                  "parentUUID": "16912068-b6bf-41d3-b404-3ddcd9302598",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e687f006-eb22-4655-8f31-ce1db74e92e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 69,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "70f3dc9b-0ef1-431d-adef-d49d3dd53dda",
              "title": "#multiply",
              "fullFile": "C:\\Users\\Admin\\Downloads\\tdd-bdd-atdd-example-master\\acceptance\\api.atdd.js",
              "file": "\\acceptance\\api.atdd.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Calc API #multiply \"before each\" hook",
                  "timedOut": false,
                  "duration": 98,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "0159f250-f9b3-4814-89bb-6fb7d397efe1",
                  "parentUUID": "70f3dc9b-0ef1-431d-adef-d49d3dd53dda",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add two arguments",
                  "fullTitle": "Calc API #multiply should add two arguments",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "75b681ae-d2c3-4a7d-9572-e173a7fff3de",
                  "parentUUID": "70f3dc9b-0ef1-431d-adef-d49d3dd53dda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75b681ae-d2c3-4a7d-9572-e173a7fff3de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 66,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "755de95c-e2aa-493b-b276-c76f20dcce19",
              "title": "#divide",
              "fullFile": "C:\\Users\\Admin\\Downloads\\tdd-bdd-atdd-example-master\\acceptance\\api.atdd.js",
              "file": "\\acceptance\\api.atdd.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Calc API #divide \"before each\" hook",
                  "timedOut": false,
                  "duration": 199,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "fb23e743-d659-4516-9dea-c35683cdf2ae",
                  "parentUUID": "755de95c-e2aa-493b-b276-c76f20dcce19",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add two arguments",
                  "fullTitle": "Calc API #divide should add two arguments",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                  "err": {},
                  "uuid": "f982b8b8-cc26-40ae-b97b-fd8e0e1a9ece",
                  "parentUUID": "755de95c-e2aa-493b-b276-c76f20dcce19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f982b8b8-cc26-40ae-b97b-fd8e0e1a9ece"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 50,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "atddreport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "atddreport"
      },
      "version": "6.2.0"
    }
  }
}